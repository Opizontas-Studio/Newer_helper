// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: punish.proto

package punish

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PunishServer_GetPunishStatus_FullMethodName  = "/punish.PunishServer/GetPunishStatus"
	PunishServer_GetPunishHistory_FullMethodName = "/punish.PunishServer/GetPunishHistory"
)

// PunishServerClient is the client API for PunishServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PunishServerClient interface {
	// GetPunishStatus 获取用户当前的处罚状态。
	GetPunishStatus(ctx context.Context, in *GetPunishStatusRequest, opts ...grpc.CallOption) (*GetPunishStatusResponse, error)
	// GetPunishHistory 获取用户的所有历史处罚记录。
	GetPunishHistory(ctx context.Context, in *GetPunishHistoryRequest, opts ...grpc.CallOption) (*GetPunishHistoryResponse, error)
}

type punishServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPunishServerClient(cc grpc.ClientConnInterface) PunishServerClient {
	return &punishServerClient{cc}
}

func (c *punishServerClient) GetPunishStatus(ctx context.Context, in *GetPunishStatusRequest, opts ...grpc.CallOption) (*GetPunishStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPunishStatusResponse)
	err := c.cc.Invoke(ctx, PunishServer_GetPunishStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punishServerClient) GetPunishHistory(ctx context.Context, in *GetPunishHistoryRequest, opts ...grpc.CallOption) (*GetPunishHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPunishHistoryResponse)
	err := c.cc.Invoke(ctx, PunishServer_GetPunishHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PunishServerServer is the server API for PunishServer service.
// All implementations must embed UnimplementedPunishServerServer
// for forward compatibility.
type PunishServerServer interface {
	// GetPunishStatus 获取用户当前的处罚状态。
	GetPunishStatus(context.Context, *GetPunishStatusRequest) (*GetPunishStatusResponse, error)
	// GetPunishHistory 获取用户的所有历史处罚记录。
	GetPunishHistory(context.Context, *GetPunishHistoryRequest) (*GetPunishHistoryResponse, error)
	mustEmbedUnimplementedPunishServerServer()
}

// UnimplementedPunishServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPunishServerServer struct{}

func (UnimplementedPunishServerServer) GetPunishStatus(context.Context, *GetPunishStatusRequest) (*GetPunishStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPunishStatus not implemented")
}
func (UnimplementedPunishServerServer) GetPunishHistory(context.Context, *GetPunishHistoryRequest) (*GetPunishHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPunishHistory not implemented")
}
func (UnimplementedPunishServerServer) mustEmbedUnimplementedPunishServerServer() {}
func (UnimplementedPunishServerServer) testEmbeddedByValue()                      {}

// UnsafePunishServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PunishServerServer will
// result in compilation errors.
type UnsafePunishServerServer interface {
	mustEmbedUnimplementedPunishServerServer()
}

func RegisterPunishServerServer(s grpc.ServiceRegistrar, srv PunishServerServer) {
	// If the following call pancis, it indicates UnimplementedPunishServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PunishServer_ServiceDesc, srv)
}

func _PunishServer_GetPunishStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPunishStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunishServerServer).GetPunishStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunishServer_GetPunishStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunishServerServer).GetPunishStatus(ctx, req.(*GetPunishStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunishServer_GetPunishHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPunishHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunishServerServer).GetPunishHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunishServer_GetPunishHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunishServerServer).GetPunishHistory(ctx, req.(*GetPunishHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PunishServer_ServiceDesc is the grpc.ServiceDesc for PunishServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PunishServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "punish.PunishServer",
	HandlerType: (*PunishServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPunishStatus",
			Handler:    _PunishServer_GetPunishStatus_Handler,
		},
		{
			MethodName: "GetPunishHistory",
			Handler:    _PunishServer_GetPunishHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "punish.proto",
}
