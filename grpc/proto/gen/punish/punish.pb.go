// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.1
// source: punish.proto

package punish

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Punishment 代表一条单独的处罚记录。
// 它的字段与 model.PunishmentRecord 中的字段一一对应。
type Punishment struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PunishmentId     int64                  `protobuf:"varint,1,opt,name=punishment_id,json=punishmentId,proto3" json:"punishment_id,omitempty"`
	MessageId        string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	AdminId          string                 `protobuf:"bytes,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	UserId           string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserUsername     string                 `protobuf:"bytes,5,opt,name=user_username,json=userUsername,proto3" json:"user_username,omitempty"`
	Reason           string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	GuildId          string                 `protobuf:"bytes,7,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Timestamp        int64                  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Evidence         string                 `protobuf:"bytes,9,opt,name=evidence,proto3" json:"evidence,omitempty"`                                          // 包含消息内容和文件路径的 JSON 字符串
	ActionType       string                 `protobuf:"bytes,10,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`                   // 例如: "re-answer", "cheat", "tag"
	TempRolesJson    string                 `protobuf:"bytes,11,opt,name=temp_roles_json,json=tempRolesJson,proto3" json:"temp_roles_json,omitempty"`        // 临时身份组 ID 的 JSON 数组
	RolesRemoveAt    string                 `protobuf:"bytes,12,opt,name=roles_remove_at,json=rolesRemoveAt,proto3" json:"roles_remove_at,omitempty"`        // 身份组 ID 到其移除时间戳的 JSON 对象映射
	PunishmentStatus string                 `protobuf:"bytes,13,opt,name=punishment_status,json=punishmentStatus,proto3" json:"punishment_status,omitempty"` // "active", "completed", "cancelled"
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Punishment) Reset() {
	*x = Punishment{}
	mi := &file_punish_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Punishment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Punishment) ProtoMessage() {}

func (x *Punishment) ProtoReflect() protoreflect.Message {
	mi := &file_punish_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Punishment.ProtoReflect.Descriptor instead.
func (*Punishment) Descriptor() ([]byte, []int) {
	return file_punish_proto_rawDescGZIP(), []int{0}
}

func (x *Punishment) GetPunishmentId() int64 {
	if x != nil {
		return x.PunishmentId
	}
	return 0
}

func (x *Punishment) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Punishment) GetAdminId() string {
	if x != nil {
		return x.AdminId
	}
	return ""
}

func (x *Punishment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Punishment) GetUserUsername() string {
	if x != nil {
		return x.UserUsername
	}
	return ""
}

func (x *Punishment) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Punishment) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Punishment) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Punishment) GetEvidence() string {
	if x != nil {
		return x.Evidence
	}
	return ""
}

func (x *Punishment) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *Punishment) GetTempRolesJson() string {
	if x != nil {
		return x.TempRolesJson
	}
	return ""
}

func (x *Punishment) GetRolesRemoveAt() string {
	if x != nil {
		return x.RolesRemoveAt
	}
	return ""
}

func (x *Punishment) GetPunishmentStatus() string {
	if x != nil {
		return x.PunishmentStatus
	}
	return ""
}

// GetPunishStatusRequest 请求获取用户在特定服务器中的处罚状态。
type GetPunishStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GuildId       string                 `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPunishStatusRequest) Reset() {
	*x = GetPunishStatusRequest{}
	mi := &file_punish_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPunishStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPunishStatusRequest) ProtoMessage() {}

func (x *GetPunishStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punish_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPunishStatusRequest.ProtoReflect.Descriptor instead.
func (*GetPunishStatusRequest) Descriptor() ([]byte, []int) {
	return file_punish_proto_rawDescGZIP(), []int{1}
}

func (x *GetPunishStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPunishStatusRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

// GetPunishStatusResponse 返回用户当前的处罚状态。
type GetPunishStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户当前的总状态，例如 "active", "none"。
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 当前所有生效的处罚列表。
	ActivePunishments []*Punishment `protobuf:"bytes,2,rep,name=active_punishments,json=activePunishments,proto3" json:"active_punishments,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetPunishStatusResponse) Reset() {
	*x = GetPunishStatusResponse{}
	mi := &file_punish_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPunishStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPunishStatusResponse) ProtoMessage() {}

func (x *GetPunishStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punish_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPunishStatusResponse.ProtoReflect.Descriptor instead.
func (*GetPunishStatusResponse) Descriptor() ([]byte, []int) {
	return file_punish_proto_rawDescGZIP(), []int{2}
}

func (x *GetPunishStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPunishStatusResponse) GetActivePunishments() []*Punishment {
	if x != nil {
		return x.ActivePunishments
	}
	return nil
}

// GetPunishHistoryRequest 请求获取用户的处罚历史记录，支持分页。
type GetPunishHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GuildId       string                 `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPunishHistoryRequest) Reset() {
	*x = GetPunishHistoryRequest{}
	mi := &file_punish_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPunishHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPunishHistoryRequest) ProtoMessage() {}

func (x *GetPunishHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punish_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPunishHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetPunishHistoryRequest) Descriptor() ([]byte, []int) {
	return file_punish_proto_rawDescGZIP(), []int{3}
}

func (x *GetPunishHistoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPunishHistoryRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *GetPunishHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetPunishHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// GetPunishHistoryResponse 返回分页后的处罚记录列表。
type GetPunishHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Punishments   []*Punishment          `protobuf:"bytes,1,rep,name=punishments,proto3" json:"punishments,omitempty"`
	TotalRecords  int32                  `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	TotalPages    int32                  `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	CurrentPage   int32                  `protobuf:"varint,4,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPunishHistoryResponse) Reset() {
	*x = GetPunishHistoryResponse{}
	mi := &file_punish_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPunishHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPunishHistoryResponse) ProtoMessage() {}

func (x *GetPunishHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punish_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPunishHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetPunishHistoryResponse) Descriptor() ([]byte, []int) {
	return file_punish_proto_rawDescGZIP(), []int{4}
}

func (x *GetPunishHistoryResponse) GetPunishments() []*Punishment {
	if x != nil {
		return x.Punishments
	}
	return nil
}

func (x *GetPunishHistoryResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetPunishHistoryResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetPunishHistoryResponse) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

var File_punish_proto protoreflect.FileDescriptor

const file_punish_proto_rawDesc = "" +
	"\n" +
	"\fpunish.proto\x12\x06punish\"\xb4\x03\n" +
	"\n" +
	"Punishment\x12#\n" +
	"\rpunishment_id\x18\x01 \x01(\x03R\fpunishmentId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12\x19\n" +
	"\badmin_id\x18\x03 \x01(\tR\aadminId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12#\n" +
	"\ruser_username\x18\x05 \x01(\tR\fuserUsername\x12\x16\n" +
	"\x06reason\x18\x06 \x01(\tR\x06reason\x12\x19\n" +
	"\bguild_id\x18\a \x01(\tR\aguildId\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x03R\ttimestamp\x12\x1a\n" +
	"\bevidence\x18\t \x01(\tR\bevidence\x12\x1f\n" +
	"\vaction_type\x18\n" +
	" \x01(\tR\n" +
	"actionType\x12&\n" +
	"\x0ftemp_roles_json\x18\v \x01(\tR\rtempRolesJson\x12&\n" +
	"\x0froles_remove_at\x18\f \x01(\tR\rrolesRemoveAt\x12+\n" +
	"\x11punishment_status\x18\r \x01(\tR\x10punishmentStatus\"L\n" +
	"\x16GetPunishStatusRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\tR\aguildId\"t\n" +
	"\x17GetPunishStatusResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12A\n" +
	"\x12active_punishments\x18\x02 \x03(\v2\x12.punish.PunishmentR\x11activePunishments\"~\n" +
	"\x17GetPunishHistoryRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\tR\aguildId\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\xb9\x01\n" +
	"\x18GetPunishHistoryResponse\x124\n" +
	"\vpunishments\x18\x01 \x03(\v2\x12.punish.PunishmentR\vpunishments\x12#\n" +
	"\rtotal_records\x18\x02 \x01(\x05R\ftotalRecords\x12\x1f\n" +
	"\vtotal_pages\x18\x03 \x01(\x05R\n" +
	"totalPages\x12!\n" +
	"\fcurrent_page\x18\x04 \x01(\x05R\vcurrentPage2\xbd\x01\n" +
	"\fPunishServer\x12T\n" +
	"\x0fGetPunishStatus\x12\x1e.punish.GetPunishStatusRequest\x1a\x1f.punish.GetPunishStatusResponse\"\x00\x12W\n" +
	"\x10GetPunishHistory\x12\x1f.punish.GetPunishHistoryRequest\x1a .punish.GetPunishHistoryResponse\"\x00B#Z!github.com/go-micro-protos/punishb\x06proto3"

var (
	file_punish_proto_rawDescOnce sync.Once
	file_punish_proto_rawDescData []byte
)

func file_punish_proto_rawDescGZIP() []byte {
	file_punish_proto_rawDescOnce.Do(func() {
		file_punish_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_punish_proto_rawDesc), len(file_punish_proto_rawDesc)))
	})
	return file_punish_proto_rawDescData
}

var file_punish_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_punish_proto_goTypes = []any{
	(*Punishment)(nil),               // 0: punish.Punishment
	(*GetPunishStatusRequest)(nil),   // 1: punish.GetPunishStatusRequest
	(*GetPunishStatusResponse)(nil),  // 2: punish.GetPunishStatusResponse
	(*GetPunishHistoryRequest)(nil),  // 3: punish.GetPunishHistoryRequest
	(*GetPunishHistoryResponse)(nil), // 4: punish.GetPunishHistoryResponse
}
var file_punish_proto_depIdxs = []int32{
	0, // 0: punish.GetPunishStatusResponse.active_punishments:type_name -> punish.Punishment
	0, // 1: punish.GetPunishHistoryResponse.punishments:type_name -> punish.Punishment
	1, // 2: punish.PunishServer.GetPunishStatus:input_type -> punish.GetPunishStatusRequest
	3, // 3: punish.PunishServer.GetPunishHistory:input_type -> punish.GetPunishHistoryRequest
	2, // 4: punish.PunishServer.GetPunishStatus:output_type -> punish.GetPunishStatusResponse
	4, // 5: punish.PunishServer.GetPunishHistory:output_type -> punish.GetPunishHistoryResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_punish_proto_init() }
func file_punish_proto_init() {
	if File_punish_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_punish_proto_rawDesc), len(file_punish_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_punish_proto_goTypes,
		DependencyIndexes: file_punish_proto_depIdxs,
		MessageInfos:      file_punish_proto_msgTypes,
	}.Build()
	File_punish_proto = out.File
	file_punish_proto_goTypes = nil
	file_punish_proto_depIdxs = nil
}
